//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-12-05 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Thu 30-Oct-2008 14:59:38)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class BlocoAlt extends Segmento {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=thenSeq KEEP=NO
  public volatile Vector thenSeq = null;
// ***** VDMTOOLS END Name=thenSeq

// ***** VDMTOOLS START Name=elseSeq KEEP=NO
  public volatile Vector elseSeq = null;
// ***** VDMTOOLS END Name=elseSeq


// ***** VDMTOOLS START Name=BlocoAltSentinel KEEP=NO
  class BlocoAltSentinel extends SegmentoSentinel {

    public final int BlocoAlt = 4;

    public final int getSequencias = 5;

    public final int nr_functions = 6;


    public BlocoAltSentinel () throws CGException {}


    public BlocoAltSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BlocoAltSentinel
;

// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BlocoAltSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_BlocoAlt KEEP=NO
  private void vdm_init_BlocoAlt () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_BlocoAlt


// ***** VDMTOOLS START Name=BlocoAlt KEEP=NO
  public BlocoAlt () throws CGException {
    vdm_init_BlocoAlt();
  }
// ***** VDMTOOLS END Name=BlocoAlt


// ***** VDMTOOLS START Name=BlocoAlt#4|String|Integer|Vector|Vector KEEP=NO
  public BlocoAlt (final String n, final Integer i, final Vector tS, final Vector eS) throws CGException {

    if (!this.pre_BlocoAlt(n, i, tS, eS).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in BlocoAlt");
    vdm_init_BlocoAlt();
    {

      nome = UTIL.ConvertToString(UTIL.clone(n));
      id = UTIL.NumberToInt(UTIL.clone(i));
      thenSeq = (Vector) UTIL.ConvertToList(UTIL.clone(tS));
      elseSeq = (Vector) UTIL.ConvertToList(UTIL.clone(eS));
      HashSet rhs_9 = new HashSet();
      rhs_9 = (HashSet) getIds(thenSeq).clone();
      rhs_9.addAll(getIds(elseSeq));
      ids = (HashSet) UTIL.clone(rhs_9);
    }
  }
// ***** VDMTOOLS END Name=BlocoAlt#4|String|Integer|Vector|Vector


// ***** VDMTOOLS START Name=pre_BlocoAlt#4|String|Integer|Vector|Vector KEEP=NO
  public Boolean pre_BlocoAlt (final String n, final Integer i, final Vector tS, final Vector eS) throws CGException {
    return new Boolean((new Integer(n.length()).intValue()) > (new Integer(0).intValue()));
  }
// ***** VDMTOOLS END Name=pre_BlocoAlt#4|String|Integer|Vector|Vector


// ***** VDMTOOLS START Name=getSequencias KEEP=NO
  public Vector getSequencias () throws CGException {

    sentinel.entering(((BlocoAltSentinel) sentinel).getSequencias);
    try {

      Vector rexpr_1 = null;
      rexpr_1 = new Vector();
      rexpr_1.add(thenSeq);
      rexpr_1.add(elseSeq);
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((BlocoAltSentinel) sentinel).getSequencias);
    }
  }
// ***** VDMTOOLS END Name=getSequencias

}
;
