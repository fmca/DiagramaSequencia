class DiagramaTeste


instance variables

public diag : Diagrama := new Diagrama();


operations
   -- operação auxiliar, que tira partido do facto do 
   -- interpretador parar quando se viola uma pré-condição
  public AssertTrue : bool ==> ()
  AssertTrue(a) == return
    pre a;

public TestInserirSegmento : () ==> ()
TestInserirSegmento () ==
	(
		dcl seg : Segmento := new Segmento("s", 1);
		dcl seg2: Segmento;
		dcl tamanho : nat1 := len diag.segmentos;
		diag.inserirSegmento(seg);
		seg2 := diag.getSegmento(len diag.segmentos);
		AssertTrue(seg.nome = seg2.nome);
		AssertTrue(seg.id = seg2.id);
		AssertTrue(tamanho+1 = len diag.segmentos);
		
	);

public TestInserirSegmentoOrdem: nat1 ==> ()
TestInserirSegmentoOrdem(ord) ==

	(
		dcl seg : Segmento := new Segmento("s", 1);
		dcl seg2: Segmento;
		dcl tamanho : nat1 := len diag.segmentos;
		diag.inserirSegmento(seg, ord);
		seg2 := diag.getSegmento(ord);
		AssertTrue(seg.nome = seg2.nome);
		AssertTrue(seg.id = seg2.id);
		AssertTrue(tamanho+1 = len diag.segmentos);
	);
	
public TestEditarSegmento: nat1 ==> ()
TestEditarSegmento(ord) ==
	(
		dcl seg : Segmento := new Segmento("s", 1);
		dcl seg2: Segmento;
		dcl tamanho : nat1 := len diag.segmentos;
		diag.inserirSegmento(seg, 1);
		
		diag.editarSegmento(1, "abc");
		
		seg2 := diag.getSegmento(1);
		AssertTrue(seg2.nome = "abc");
		AssertTrue(seg.id = seg2.id);
		AssertTrue(tamanho+1 = len diag.segmentos);
	);


public TestInserirObjeto : () ==> ()
TestInserirObjeto () ==
	(
		dcl obj : Objeto := new Objeto("nome1", 1, "tipo1");
		dcl obj2: Objeto;
		dcl tamanho : nat1 := len diag.objetos;
		diag.inserirObjeto(obj);
		obj2 := diag.getObjeto(len diag.objetos);
		AssertTrue(obj.nome = obj2.nome);
		AssertTrue(obj.id = obj2.id);
		AssertTrue(tamanho+1 = len diag.objetos);
	);

public TestEditarObjeto: () ==> ()
TestEditarObjeto() ==
	(
		dcl seg : Objeto := new Objeto("nome1", 1, "Actor");
		dcl seg2: Objeto;
		dcl tamanho : nat1 := len diag.objetos;
		diag.inserirObjeto(seg, 1);
		
		diag.editarObjeto("nome2", "Object", 1);
		
		seg2 := diag.getObjeto(1);
		AssertTrue(seg2.nome = "nome2");
		AssertTrue(seg.id = seg2.id);
		AssertTrue(seg2.tipo = "Object");
		AssertTrue(tamanho+1 = len diag.objetos);
	);
	
	public TestInserirSegmento : () ==> ()
TestInserirSegmento () ==
	(
		dcl seg : Segmento := new Segmento("s", 1);
		dcl seg2: Segmento;
		dcl tamanho : nat1 := len diag.segmentos;
		diag.inserirSegmento(seg);
		seg2 := diag.getSegmento(len diag.segmentos);
		AssertTrue(seg.nome = seg2.nome);
		AssertTrue(seg.id = seg2.id);
		AssertTrue(tamanho+1 = len diag.segmentos);
		
	);

public TestEliminarSegmento : () ==> ()
TestEliminarSegmento () ==
	(
		dcl seg : Segmento := new Segmento("nome1", 1);
		dcl seg1: Segmento := new Segmento("nome2", 2);
		dcl seg11: Segmento := new Segmento("nome3", 3);
		
		dcl seg2: Segmento;
		dcl tamanho : nat1;
		diag.inserirSegmento(seg);
		diag.inserirSegmento(seg1);
		diag.inserirSegmento(seg11);
		tamanho := len diag.segmentos;
		diag.eliminarSegmento(2);
		
		for all s in set elems diag.segmentos do
			AssertTrue(s.id <> seg.id);
			
		AssertTrue(tamanho-1 = len diag.segmentos);
		
	);
	
public TestEliminarObjeto : () ==> ()
TestEliminarObjeto () ==
	(
		dcl seg : Objeto := new Objeto("nome1", 1, "Actor");
		dcl seg1: Objeto := new Objeto("nome2", 2, "Object");
		dcl seg11: Objeto := new Objeto("nome3", 3, "Actor");
		
		dcl seg2: Objeto;
		dcl tamanho : nat1;
		diag.inserirObjeto(seg);
		diag.inserirObjeto(seg1);
		diag.inserirObjeto(seg11);
		tamanho := len diag.objetos;
		diag.eliminarObjeto(2);
		
		for all s in set elems diag.objetos do
			AssertTrue(s.id <> seg.id);
			
		AssertTrue(tamanho-1 = len diag.objetos);
		
	);		
end DiagramaTeste