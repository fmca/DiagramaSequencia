class Diagrama

	instance variables

	public segmentos : seq of Segmento := [];
	public objetos : seq of Objeto:= [];
	public titulo : seq of char:=[];
	public limite : int:=5;
	
	
	operations
	public Diagrama: seq of char * nat1 ==> Diagrama
	Diagrama(t, l) ==
	(
		titulo :=t;
		limite :=l;
	)pre l>0 and t <> ""
	 post titulo = t and limite = l;
	
	
	--Getters
	public getObjeto: nat1 ==> Objeto
		getObjeto(ord) ==
		(
			dcl o: Objeto;
			o:=objetos(ord);
			return o;
		) pre ord in set inds objetos;

	public getSegmento: nat1 ==> Segmento
		getSegmento(ord) ==
		( 
			dcl s: Segmento;
			s:=segmentos(ord);
			return s;
		) pre ord in set inds segmentos;


	---------------------------------------------
	public inserirSegmento: Segmento ==> ()
		inserirSegmento(sgmt) ==
			segmentos := segmentos ^ [sgmt]
			
			
		pre len(segmentos) < limite and not exists s in set elems segmentos & s.id = sgmt.id;	
		
	---------------------------------------------
	public inserirSegmento: Segmento * nat1 ==> ()
	inserirSegmento(sgmt, ord) == 
		
		if(ord=1) then segmentos:= [sgmt] ^ segmentos
		else segmentos := segmentos(1,..., ord-1) ^ [sgmt] ^ segmentos(ord, ..., len(segmentos))
		
	pre ord in set inds (segmentos) and not exists s in set elems segmentos & s.id = sgmt.id;
	
	---------------------------------------------
	
	public editarSegmento: nat1 * seq of char ==> ()
	editarSegmento(ord, novoNome) ==
		(
			segmentos(ord).nome := novoNome;
		) pre ord in set inds segmentos and novoNome <> "";
	
	---------------------------------------------
	
	public inserirObjeto: Objeto ==> ()
	inserirObjeto(obj) == 
		
		objetos := objetos ^ [obj]
		
	pre len(objetos) < limite and not exists s in set elems objetos & s.id = obj.id;
	
	---------------------------------------------
	
	public inserirObjeto: Objeto * nat1 ==> ()
	inserirObjeto(obj, ord) == 
		
		if(ord=1) then objetos:= [obj] ^ objetos
		else objetos := objetos(1,..., ord-1) ^ [obj] ^ objetos(ord, ..., len(objetos))
		
	pre ord in set inds (objetos) and not exists s in set elems objetos & s.id = obj.id;
	
	---------------------------------------------
	
	public editarObjeto: seq of char * seq of char * nat1 ==> ()
	editarObjeto(novoNome, novoTipo, ord) == 
		(
			objetos(ord).nome := novoNome;
			objetos(ord).tipo := novoTipo;
		)pre ord in set inds (objetos);
	
	---------------------------------------------
	
	public eliminarSegmento: nat1 ==> ()
	eliminarSegmento(ord) ==
		if(ord=1) then segmentos:= segmentos(2,...,len(segmentos))
		else segmentos := segmentos(1,..., ord-1) ^  segmentos(ord+1, ..., len(segmentos))
	
	pre ord in set inds (segmentos);
		
	---------------------------------------------
	
	public eliminarObjeto: nat1 ==> ()
	eliminarObjeto(ord) ==
		if(ord=1) then objetos:= objetos(2,...,len(objetos))
		else objetos := objetos(1,..., ord-1) ^  objetos(ord+1, ..., len(objetos))
		
	pre ord in set inds (objetos);
	
	---------------------------------------------
	
	
		
end Diagrama



class Segmento

instance variables
	public nome: seq of char;
	public id : nat1;
	inv len(nome) > 0
operations
	public Segmento : seq of char * nat1 ==> Segmento
	Segmento (n, i) ==
	(
		nome:= n;
		id:=i;
	)pre i>0;
end Segmento

class Objeto
instance variables 

public nome: seq of char:=[];
public tipo: seq of char:="Object";
public id : int;

inv tipo in set {"Actor", "Unit", "Object", "Other"};

operations 
public Objeto : seq of char * nat1 * seq of char ==> Objeto
Objeto (n, i, t) ==
	(
		nome:= n;
		id:=i;
		tipo:=t;
	)pre len(n) > 0 and t in set {"Actor", "Unit", "Object", "Other"}
	 post nome = n and id=i and tipo=t;


end Objeto


class BlocoLoop is subclass of Segmento
operations
	public BlocoLoop : seq of char * nat1 * seq of Mensagem ==> BlocoLoop
	BlocoLoop(n, i, m) ==
		(
			nome := n;
			id := i;
			loopSeq := m;
		)pre i > 0 and ((len nome) > 0) and isofclass(BlocoLoop, BlocoLoop(n, i, m))
		post self.nome = n and self.id = i and self.loopSeq = m;
instance variables
	public loopSeq: seq of Mensagem;
	
end BlocoLoop


class BlocoAlt is subclass of Segmento
operations 
	public BlocoAlt: seq of char * nat1 * seq of Mensagem * seq of Mensagem ==> BlocoAlt
	BlocoAlt(n, i, tS, eS) ==
		(
			nome := n;
			id := i;
			thenSeq := tS;
			elseSeq := eS;
		) pre ((len nome) > 0) and isofclass(BlocoAlt, BlocoAlt(n, i, tS, eS))
		post self.nome = n and self.id = i and self.thenSeq = tS and self.elseSeq = eS;
instance variables
	public thenSeq: seq of Mensagem;
	public elseSeq: seq of Mensagem;
	
end BlocoAlt

class Mensagem is subclass of Segmento

operations
	public Mensagem: seq of char * nat1 * seq of char * Objeto * Objeto ==> Mensagem
	Mensagem(n, i, t, objO, objD) ==
	(	
		nome:=n;
		id:=i;
		tipo:=t;
		objOrigem:=objO;
		objDestino:=objD;
	)pre isofclass(Mensagem, Mensagem(n, i, t, objO, objD)) and ((len nome) > 0) and (tipo in set {"message", "action", "asynchronous", "link", "destroy", "call", "create", "other"})
	post self.nome =n and self.id = i and self.tipo = t and self.objOrigem = objO and self.objDestino = objD;
	
instance variables
	public objOrigem: Objeto;
	public objDestino: Objeto;
	public tipo : seq of char;
	inv tipo in set { "message", "action", "asynchronous", "link", "destroy", "call", "create", "other"}

end Mensagem








